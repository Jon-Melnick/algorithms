pattern = "abba"
string = "catbeebeeant"

def pattern?(pattern, string)
	len = pattern.length
	len_hash = Hash.new(0)
	p_count = Hash.new(0)
	pattern.each_char.with_index do |el, idx|
		len_hash[el] = 1
		p_count[el] += 1
		if idx == len - 1
			subtractor = p_count.values.reduce(:+) - p_count[el]
			len_hash[el] = ((string.length-subtractor)/p_count[el])
		end
	end
	p len_hash
	count = 0
	found = false
	while found == false
		match = Hash.new()
		start_idx = 0
		len_hash.keys do |el|
			end_idx = len_hash[el]
			match[] += string[start_idx...(end_idx + start_idx)]
			start_idx = end_idx + start_idx
			if start_idx >= string.length
				found = true
			end
			p word
		end
		p word
		count += 1
		if count > 10
			found = true
		end
	end




end

pattern?(pattern, string)







def match(str,pat,pat_map)
  return true if str.empty? && pat.empty?
  return false if str.empty? || pat.empty?

  if pat_map.has_key?(pat[0])
    expected_chars = pat_map[pat[0]]
    expected_pat_len = expected_chars.length
    if expected_chars == str[0..expected_pat_len-1]
      return match(str[expected_pat_len..-1], pat[1..-1], pat_map)
    else
      pat_map.delete(pat[0])
      return false
    end
  else
    str_len = str.length
    (0..[(str_len - pat.length - 1), 0].max).each do |i|
      pat_map[pat[0]] = str[0..i]
      return true if match(str[i+1..-1], pat[1..-1], pat_map)
    end
  end
  return false
end

# puts match('xyzabsxzyabs', 'aabb', {})
# puts match('xyzabcxzyabc', 'abab', {})


def match?(pat, str, p_words)
	return false if pat.empty?
	if p_words.has_key?(pat[0])
		expected = str[0]
		word = p_words[pat[0]]
		p p_words
		if expected != word
			p_words.delete[pat[0]]
			return false
		end
		return match?(pat[1..-1], str[word.length..-1], p_words)
	else

		p_words[pat[0]] = str[0]
		return match?(pat[1..-1], str[1..-1], p_words)
	end

end

p_words = {

}

def jump_over_numbers(list)
  idx = list[0]
  count = 1
  until idx >= list.length || list[idx] == 0
    idx += list[idx]
    count += 1
  end
  return count
end


def coins(coins, sum)
	start = Time.now
	arr = Array.new(sum+1)
	arr[0] = 0
	(1..sum).each do |i|
		coins.select{|coin| coin <= i}.each do |coin|
			if arr[i].nil?
				arr[i] = arr[(i - coin)] + 1
			else
				if (arr[(i - coin)] + 1) < arr[i]
					arr[i] = arr[(i - coin)] + 1
				end
			end
		end
	end
	p Time.now - start
end

coins([1, 3, 5], 10000)

def new_coins(coins, sum)
	start = Time.now
	arr = Array.new(sum+1)
	arr[0] = 0
	coins.length.times do |idx|
		coin = coins[idx]
		(1..sum).each do |idx2|
			if idx2 >= coin
				arr[idx2] = arr[idx2 - coin] + 1
			end
		end
	end
	p Time.now - start
end

new_coins([1, 3, 5], 10000)
